#!/usr/bin/env bash

install_R() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir
    tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local source_path
  source_path=$(get_download_file_path "$install_type" "$version" "$tmp_download_dir")
  download_source "$install_type" "$version" "$source_path"

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd "$(dirname "$source_path")" || exit
    tar zxf "$source_path" || exit 1
    cd "$(untar_path "$install_type" "$version" "$tmp_download_dir")" || exit

    local configure_options
    configure_options="$(construct_configure_options)"
    # set in os_based_configure_options
    # we unset it here because echo-ing changes the return value of the function
    unset ASDF_PKG_MISSING

    echo "Building with options: $configure_options"
    # shellcheck disable=SC2086
    ./configure $configure_options || exit 1
    make -j "${ASDF_CONCURRENCY:-1}" || exit 1
    make install || exit 1
  )
}

construct_configure_options() {
  if [ "$R_CONFIGURE_OPTIONS" = "" ]; then
    local configure_options
    configure_options="$(os_based_configure_options) --prefix=$install_path"

    if [ "$R_EXTRA_CONFIGURE_OPTIONS" != "" ]; then
      configure_options="$configure_options $R_EXTRA_CONFIGURE_OPTIONS"
    fi
  else
    local configure_options="$R_CONFIGURE_OPTIONS --prefix=$install_path"
  fi

  echo "$configure_options"
}

os_based_configure_options() {
  local configure_options=""

  configure_options=""

  echo "$configure_options"
}

untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  if [ "$install_type" = "version" ]; then
    echo "$tmp_download_dir/R-${version}"
  else
    echo "$tmp_download_dir/R-${version}"
  fi
}

download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url
  download_url=$(get_download_url "$install_type" "$version")

  curl -Lo "$download_path" -C - "$download_url"
}

get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="R-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}

get_download_url() {
  local install_type=$1
  local version=$2
  local major_version
  major_version="$(echo "$version" | cut -d. -f1)"
  echo "https://cloud.r-project.org/src/base/R-${major_version}/R-${version}.tar.gz"
}

install_R "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
