#!/usr/bin/env bash

set \
  -o nounset \
  -o pipefail \
  -o errexit

# required environment variables
: ${ASDF_INSTALL_TYPE?}
: ${ASDF_INSTALL_VERSION?}
: ${ASDF_INSTALL_PATH?}

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_jsonnet_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install () {
  local -r install_type="$1"
  local -r version="$2"
  local -r install_path="$3"

  local -r bin_install_path="${install_path}/bin"

  local -r download_url="$(get_download_url "${version}")"

  if curl -sfL "${download_url}" | tar xz -C "${TMP_DOWNLOAD_DIR}"; then
    local -r source_path="${TMP_DOWNLOAD_DIR}/jsonnet-${version}"

    echo "Compiling version ${version} of jsonnet"
    make -sC "${source_path}" >/dev/null 2>&1

    echo "Cleaning jsonnet previous binaries"
    rm -rf "${bin_install_path?}"

    echo "Creating jsonnet bin directory"
    mkdir -p "${bin_install_path}"

    local f
    for f in "${source_path}"/*; do
      if [[ -f "${f}" ]] \
      && [[ -x "${f}" ]]; then
        cp "${f}" "${bin_install_path}"
      fi
    done
  else
    echo "Error: jsonnet version ${version} not found" >&2
    exit 1
  fi
}

get_arch () {
  uname | tr '[:upper:]' '[:lower:]'
}

get_filename () {
  local -r version="$1"

  local -r arch="$(get_arch)"
  if [[ ${version} =~ ^[0-9] ]]; then
    echo "v${version}"
  else
    echo "${version}"
  fi
}

get_download_url () {
  local -r version="$1"

  local -r filename="$(get_filename "${version}")"
  echo "https://codeload.github.com/google/jsonnet/tar.gz/${filename}"
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
